#!/usr/bin/env nu

use lib/gen-flake.nu *
use lib/state.nu *

def main [] {
    help main
}

def select-envnames [multiple state --verb="use"] {
    let prompt = $"Select the env \(from (ansi yellow)`($state.statedir)'(ansi reset)) to ($verb):"
    let prompt_multi = $"Select the envs \(from (ansi yellow)`($state.statedir)'(ansi reset)) to ($verb) \(space to select):"
    $state.envs | transpose name desc | flatten | select name description? |
    update description {|e| $"($e.name) (ansi grey)\(($e.description))(ansi reset)"} | sort-by -i name |
    if $multiple {input list -d description -m $prompt_multi} else {input list -d description -f $prompt | [$in]} |
    get name
}

# Print out the flake that will generate the <envname> environment
def "main flake" [
    --multiple (-m) # Whether to merge multiple environments
    --statedir (-d) = "" # Where to read the envil state from
    --systems (-s): list<string> = []
    # Which systems should this flake build for. The flake will use `nixpkgs.lib.systems.flakeExposed' if <systems> is left empty
] {
    let state = get-state $statedir
    let envname = select-envnames $multiple $state --verb "generate a flake from"
    set-currents --statedir $state.statedir
    generate-flake $envname $state $systems
}

def write-flake [envnames state] {
    let flakedir = $envnames | str join "+"
    let flakepath = [$state.statedir env-flakes $flakedir] | path join
    mkdir $flakepath
    generate-flake $envnames $state | save -rf ([$flakepath flake.nix] | path join)
    $flakepath
}

# Start a subshell containing <envname>, or run a command in this subshell
def "main shell" [
    --multiple (-m) # Whether to merge multiple environments
    --statedir (-d) = "" # Where to read the envil state from and write the temporary flake.nix
] {
    if ($env.SHELL_ENV? != null) {
        error make {msg: "Nested subshells are not supported"}
    }
    let state = get-state $statedir
    let envnames = select-envnames $multiple $state --verb "use in the subshell"
    let flakepath = write-flake $envnames $state
    let envname = $envnames | str join "+"
    print $"(ansi grey)Starting a subshell with env (ansi yellow)`($envname)'(ansi grey)...(ansi reset)"
    set-currents --statedir $state.statedir
    try {
        SHELL_ENV=$envname ^nix shell $"path:($flakepath)"
    } catch {
        print $"(ansi grey)Last subshell command exited with (ansi yellow)($env.LAST_EXIT_CODE)(ansi reset)"
    }
}

# Apply the selected environment, ie. switch the bins in `$HOME/.envil/current/bin' to those of <envname>
def "main switch" [
    --multiple (-m) # Whether to activate multiple environments
    --statedir (-d) = "" # Where to read the envil state from and write the temporary flake.nix
] {
    let state = get-state $statedir
    let envnames = select-envnames $multiple $state --verb "switch to"
    let flakepath = write-flake $envnames $state
    ^nix build $"path:($flakepath)" -o ([$env.HOME .envil current] | path join)
    let envname = $envnames | str join "+"
    set-currents --envname $envname --statedir $state.statedir
    print $"(ansi grey)Switched to env (ansi yellow)`($envname)'(ansi reset)"
}

def ls_or_empty [folder] {
    try {
        ls -s $folder | get name
    } catch {
        []
    }
}

# Report if some bins are present several times in your PATH, but pointing to different actual executables, thus creating an ambiguity
def "main checkpath" [
    --all (-a) # Check for all bins, not just those in the nix store
] {
    let bins = $env.PATH | each {|p| try {ls $p} catch {[]} | insert source $p} | flatten | rename -c {name: path} |
               insert stem {$in.path | path parse | get stem} | update path {path expand} |
               if $all { $in } else { where path starts-with /nix/store }
    let bins = $bins | group-by stem --to-table | each {{group: $in.group, items: ($in.items | uniq-by path | uniq-by source)}}
    for bin in $bins {
        if (($bin.items | length) >= 2) {
            print $"(ansi yellow)`($bin.group)'(ansi reset) is present more than once in your PATH. Found in: ($bin.items.source)"
        }
    }
}

# Get the current environment, ie. the last environment the user switched to, and the env activated in a subshell (if any)
def "main current" [] {
    let currents = get-currents
    if ($currents | is-empty) {
        print $"(ansi yellow)No activated env and no known statedir(ansi reset)"
    }
    if ($currents.statedir? != null) {
        print $"- Last statedir used: (ansi yellow)`($currents.statedir)'(ansi reset)"
    }
    if ($currents.env? != null) {
        print $"- Activated env: (ansi yellow)`($currents.env)'(ansi reset)"
        let binlist = $"(ls_or_empty ([$env.HOME .envil current bin] | path join) | sort -i)"
        print $"  | bins: ($binlist)"
    }
    if ($env.SHELL_ENV? != null) {
        print $"- Env in this subshell: (ansi yellow)`($env.SHELL_ENV)'(ansi reset)"
        let binlist = $"($env.PATH | where {str ends-with "envil-current-env/bin"} | ansi strip | each {ls_or_empty $in} | flatten | sort -i)"
        print $"  | bins: ($binlist)"
    }
}

# Update an environment's inputs (package sources), and update its associated flake.lock file
#
# This will NOT rebuild the environment, you need to do an `envil switch/shell' again afterwards
def "main update" [
    envname_str: string = "" # The environment whose flake.lock should be updated
    --statedir (-d) = "" # Where to read the envil state and look for flake.nix/lock files
] {
    let state = get-state $statedir
    let envnames = if ($envname_str == "") {
        select-envnames false $state --verb "update"
    } else {
        $envname_str | split row "+"
    }
    let flakepath = write-flake $envnames $state
    try {
        ^nix flake update --flake $"path:($flakepath)" err> /dev/null
    } catch {
        # We may be on an older version of nix where the --flake arg does not exist:
        ^nix flake update $"path:($flakepath)"
    }
    set-currents --statedir $state.statedir
    print $"Updated flake.lock for env (ansi yellow)`($envname_str)'(ansi reset)"
}

# Deactivate any env that we have switched to (envil adds nothing more to the PATH)
def "main deactivate" [] {
    let currents = get-currents
    try {
        erase-current-env
        rm ([$env.HOME .envil current] | path join)
    } catch {
        print $"(ansi yellow)No env was activated(ansi reset)"
    }
    try {
        print $"(ansi grey)Env (ansi yellow)`($currents.env)'(ansi grey) env has been deactivated(ansi reset)"
    }
}
