#!/usr/bin/env nu

use lib/gen-flake.nu *
use lib/state.nu *

def main [] {
    help main
}

def select-envname [envname state --verb="use"] {
    let envname = if $envname == "" {
        $state.envs | columns | sort |
        input list -f $"Select the env \(from (ansi yellow)`($state.statedir)'(ansi reset)) to ($verb):"
    } else {
        $envname
    }
    if $envname in ["default"] {
        error make {msg: $"`($envname)' is a reserved name, please rename the environment"}
    }
    $envname
}

# Print out the flake that will generate the <envname> environment
def "main flake" [
    envname = "" # The name of the env to generate a flake for
    --statedir (-d) = "" # Where to read the envil state from
    --systems (-s): list<string> = []
    # Which systems should this flake build for. The flake will use `nixpkgs.lib.systems.flakeExposed' if <systems> is left empty
] {
    let state = get-state $statedir
    let envname = select-envname $envname $state --verb "generate a flake from"
    set-currents --statedir $state.statedir
    generate-flake $envname $state $systems
}

def write-flake [envname state] {
    let flakepath = [$state.statedir env-flakes $envname] | path join | path expand
    mkdir $flakepath
    generate-flake $envname $state | save -rf ([$flakepath flake.nix] | path join)
    $flakepath
}

# Start a subshell containing <envname>, or run a command in this subshell
def --wrapped "main shell" [
    envname: string = "" # The environment to open in a subshell
    --statedir (-d) = "" # Where to read the envil state from and write the temporary flake.nix
    ...cmd # The command to run and its args
] {
    let state = get-state $statedir
    let envname = select-envname $envname $state --verb "use in the subshell"
    let flakepath = write-flake $envname $state
    print $"(ansi grey)Starting a subshell with env (ansi yellow)`($envname)'(ansi grey)...(ansi reset)"
    let args = if ($cmd | is-empty) {[]} else {["-c"] | append $cmd}
    set-currents --statedir $state.statedir
    try {
        SHELL_ENV=$envname ^nix shell $"path:($flakepath)" ...$args
    } catch {
        print $"(ansi grey)Last subshell command exited with (ansi yellow)($env.LAST_EXIT_CODE)(ansi reset)"
    }
}

# Print the current config of each env
def "main envs" [
    --statedir (-d) = "" # Where to read the envil state from
] {
    let state = get-state $statedir
    set-currents --statedir $state.statedir
    print $"(ansi green)($state | reject statedir | to yaml)(ansi reset)"
    print $"(ansi grey)[Config read from statedir (ansi yellow)`($state.statedir)'(ansi grey)](ansi reset)"
}

# Apply the selected environment, ie. switch the bins in `$HOME/.envil/current/bin' to those of <envname>
def "main switch" [
    envname: string = "" # The environment to switch to
    --statedir (-d) = "" # Where to read the envil state from and write the temporary flake.nix
] {
    let state = get-state $statedir
    let envname = select-envname $envname $state --verb "switch to"
    let flakepath = write-flake $envname $state
    ^nix build $"path:($flakepath)" -o ([$env.HOME .envil current] | path join)
    set-currents --envname $envname --statedir $state.statedir
    print $"(ansi grey)Switched to env (ansi yellow)`($envname)'(ansi reset)"
}

def ls_or_empty [folder] {
    try {
        ls -s $folder | get name
    } catch {
        []
    }
}

# Get the current environment, ie. the last environment the user switched to, and the env activated in a subshell (if any)
def "main current" [
] {
    let currents = get-currents
    if ($currents | is-empty) {
        print $"(ansi yellow)No activated env and no known statedir(ansi reset)"
    }
    if ($currents.statedir? != null) {
        print $"- Last statedir used: (ansi yellow)`($currents.statedir)'(ansi reset)"
    }
    if ($currents.env? != null) {
        print $"- Activated env: (ansi yellow)`($currents.env)'(ansi reset)"
        let binlist = $"(ls_or_empty ([$env.HOME .envil current bin] | path join))"
        print $"  | bins: ($binlist)"
    }
    if ($env.SHELL_ENV? != null) {
        print $"- Env in this subshell: (ansi yellow)`($env.SHELL_ENV)'(ansi reset)"
        let binlist = $"($env.PATH | where {str ends-with $"($env.SHELL_ENV)-env/bin"} | get 0 | ansi strip | ls_or_empty $in)"
        print $"  | bins: ($binlist)"
    }
}

# Update an environment's inputs (package sources), and update its associated flake.lock file
#
# This will NOT rebuild the environment, you need to do an `envil switch/shell' again afterwards
def "main update" [
    envname: string = "" # The environment whose flake.lock should be updated
    --statedir (-d) = "" # Where to read the envil state and look for flake.nix/lock files
] {
    let state = get-state $statedir
    let envname = select-envname $envname $state --verb "update"
    let flakepath = write-flake $envname $state
    try {
        ^nix flake update --flake $"path:($flakepath)"
    } catch {
        # We may be on an older version of nix where the --flake arg does not exist:
        ^nix flake update $"path:($flakepath)"
    }
    set-currents --statedir $state.statedir
    print $"Updated flake.lock for env (ansi yellow)`($envname)'(ansi reset)"
}

# Deactivate any env that we have switched to (envil adds nothing more to the PATH)
def "main deactivate" [] {
    let currents = get-currents
    try {
        erase-current-env
        rm ([$env.HOME .envil current] | path join)
    } catch {
        print $"(ansi yellow)No env was activated(ansi reset)"
    }
    try {
        print $"(ansi grey)Env (ansi yellow)`($currents.env)'(ansi grey) has been deactivated(ansi reset)"
    }
}
