#!/usr/bin/env nu

use lib/gen-flake.nu *
use lib/state.nu *

$env.config.color_config = {
    duration: default
    string: default
    cell-path: default
    binary: default
    separator: default
    list: default
    record: default
    float: default
    range: default
    int: default
    nothing: default
    block: default
}

def main [] {
    main show
}

def select-envs [
    preselected: list<string>
    unique: bool
    state: record<envs: any>
    --verb: string = "use"
]: nothing -> table<name: string, source: string, active: bool> {
    if ($preselected | is-empty) {
        let statedir_bit = if $state.statedir? != null {
            $" \(from (ansi yellow)`($state.statedir)'(ansi reset)) "
        } else {
            " "
        }
        let prompt = $"Select the env($statedir_bit)to ($verb):"
        let prompt_multi = $"Select the envs($statedir_bit)to ($verb) \(Use <spacebar> to \(de)select one, <a> to \(de)select all)"
        
        $state.envs |
            transpose name desc |
            flatten |
            select name description? |
            update description {|e|
                let desc_bit = if $e.description? != null {
                    $" (ansi grey)\(($e.description))(ansi reset)"
                } else {
                    ""
                }
                $"($e.name)($desc_bit)"
            } |
            sort-by -i name |
            if $unique {
                input list -d description -f $prompt |
                if ($in == null) {[]} else {[$in]}
            } else {
                input list -d description -m $prompt_multi |
                default []
            } |
            get name
    } else {
        $preselected
    } |
    wrap name |
    insert source $state.statedir? |
    insert active true
}

# Print out the flake that will generate an env
def "main flake" [
    envname: string = ""
    --statedir (-d): string = "" # Where to read the envil state from
                               #
                               # If empty, will use the statedir of the current stack
    --systems (-s): list<string> = []
    # Which systems should this flake build for. The flake will use `nixpkgs.lib.systems.flakeExposed' if <systems> is left empty
] {
    let state = get-state $statedir
    let envname = if ($envname == "") {
        select-envs [] true $state --verb "create a flake for" | get 0.name
    } else {
        $envname
    }
    generate-flake $envname $state $systems
}

def do-update [flakepath: path] {
    try {
        ^nix flake update --flake $flakepath --refresh
    } catch {
        # We may be on an older version of nix where the --flake arg does not exist yet
        ^nix flake update $flakepath --refresh
    }
}

def write-flakes [
    environments: table<source: string, name: string>
] : nothing -> table<envname: string, flakepath: path> {
    $environments | each {|env_|
        if ($env_.active? != false) {
            let state = get-state $env_.source
            if $state.statedir_is_flake? == true {
                {envname: $env_.name, flakepath: $env_.source}
            } else {
                let flakepath = [$env_.source flakes $env_.name] | path join
                mkdir $flakepath
                generate-flake $env_.name $state | save -rf ([$flakepath flake.nix] | path join)
                if (not ([$flakepath flake.lock] | path join | path exists) or $env_.update? == true) {
                    do-update $"path:($flakepath)"
                }
                {envname: $env_.name, flakepath: $"path:($flakepath)"}
            }
        }
    }
}

# Temporarily activate some envs by starting a subshell
def "main shell" [
    --unique (-u) # Whether to select just one environment (in which case the env picker will come with a searchbar)
    --statedir (-d): string = "" # Where to read the envil state from. If empty, will use the last used statedir
    --no-stack (-S) # Whether to remove the envs of the stack from the PATH while you are in the shell
                    # Might not work as expected depending on your shell config (as it may add to your PATH again when starting)
    --isolated (-i) # Whether to limit the PATH of the shell so it can only see the tools from the selected envs and standard UNIX paths (implies -S)
    --empty (-e) # Whether to start a shell that contains nothing, to hide the current stack (implies -i)
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    if ($env.SHELL_ENV? != null) {
        error make {msg: "Nested subshells are not supported"}
    }
    let isolated = $isolated or $empty
    let state = get-state $statedir
    let envstack = if $empty {[]} else {select-envs $envnames $unique $state --verb "use in the subshell"}
    let envs = write-flakes $envstack
    let shell_bit = if $isolated {"an isolated subshell"} else if $no_stack {"a subshell (hiding the stack)"} else {"a subshell"}
    print $"(ansi grey)Starting ($shell_bit) with env\(s) (ansi green)($envstack | get name)(ansi grey)...(ansi reset)"
    let merged_name = $envstack | get name | str join "+"
    let new_path = if $isolated {
        [/usr/local/sbin, /usr/local/bin, /usr/sbin, /usr/bin, /sbin, /bin]
    } else if $no_stack {
        $env.PATH | where {($in | path expand) != (nixprof | path expand)}
    } else {
        $env.PATH
    }
    set-currents --statedir $state.statedir
    try {
        let nix_exe = (which nix).path.0
        PATH=$new_path SHELL_ENV=$merged_name run-external $nix_exe shell ...(
            $envs | each {|e|
                $"($e.flakepath)#($e.envname)"
            }
        )
    } catch {
        print $"(ansi red)Last subshell command exited with errcode (ansi yellow)($env.LAST_EXIT_CODE)(ansi reset)"
    }
}

# Run an executable provided by an env
def "main run" [
    envname: string # Which environment to look in
    bin = "" # Which bin to run. If empty will use `envname' as the bin name
    --statedir (-d): string = "" # Where to read the envil state from. If empty, will use the last used statedir
    ...args: string # The args to give to the command
] {
    let state = get-state $statedir
    let envs = write-flakes [{name: $envname, source: $state.statedir}]
    let output = ^nix build $"($envs.0.flakepath)#($envs.0.envname)" --print-out-paths --no-link
    let bin = if ($bin | is-empty) {
        $envname
    } else {
        $bin
    }
    let bin_path = $output | path join "bin" $bin
    if ($bin_path | path exists) {
        run-external $bin_path ...$args
    } else {
        print $"(ansi red)Could not find bin `($bin)' in env `($envname)'.(ansi reset) Other bins in that env:"
        ls-filenames ($output | path join "bin")
    }
}

def nixprof [] {
    [~ .envil current] | path join | path expand -n
}

def do-switch [
    envstack: table<source: string, name: string>
    --append
] {
    use lib/nix-printer.nu *

    # We stick to 'nix-env' instead of the newest 'nix profile'
    # because the --remove-all flag does not exist (yet?) for 'nix profile'
    let exprs = write-flakes $envstack | each {|e|
        f _ ( [
            (p builtins.getFlake (s $e.flakepath))
            ".packages.${builtins.currentSystem}."
            $e.envname
        ] | str join ""
        )
    }
    let profile = (nixprof)
    let envstack = $envstack | where active?
    let envs_bit = $"(ansi yellow)($envstack | get name | str join ' ')(ansi reset)"
    if $append {
        if not ($envstack | is-empty) {
            print $"Adding env\(s) ($envs_bit)"
        }
    } else {
        print $"Replacing stack with env\(s) ($envs_bit)"
    }
    ( ^nix-env --profile $profile --quiet
        ...(if not $append {[--remove-all]} else {[]})
        --install --from-expression ...$exprs
    )
    ^nix-env --profile $profile --delete-generations '+5' --quiet
}

def do-remove [removed: list<string>] {
    if not ($removed | is-empty) {
        let profile = nixprof
        print $"Removing env\(s) (ansi yellow)($removed | str join ' ')(ansi reset)"
        ^nix-env --profile $profile --uninstall ...($removed | each {$"($in)-envil"}) --quiet
        ^nix-env --profile $profile --delete-generations '+5' --quiet
    }
}

# Switch to a new stack, or reload the current one from statedirs
def "main switch" [
    --unique (-u) # Whether to select just one environment (in which case the env picker will come with a searchbar)
    --statedir (-d): string = "" # Where to read the envil state from. If empty, will use the last used statedir
    --reload (-r) # Reload the current stack, ignoring other args
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    let state = get-state $statedir
    let new_stack = if $reload {
        (get-currents).envstack
    } else {
        select-envs $envnames $unique $state --verb "switch to"
    }
    do-switch $new_stack
    set-currents --envstack $new_stack --statedir $state.statedir
}

# Add new envs on top of the stack
def "main push" [
    --unique (-u) # Whether to select just one env (in which case the env picker will come with a searchbar)
    --statedir (-d): string = "" # Where to read the envil state from. If empty, will use the last used statedir
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    let state = get-state $statedir
    let stack = (get-currents).envstack
    let additions = select-envs $envnames $unique ($state | update envs {reject -o ...($stack | get name)}) --verb "add to the stack"
    do-switch --append $additions
    set-currents --envstack ($stack ++ $additions) --statedir $state.statedir
}

# Remove the top env(s) from the stack
#
# If no args are given, pops the first env on top of the stack
def "main pop" [
    --select (-s) # Open a selector menu, ignoring subsequent args
    --all (-a) # Pop the entire stack, ignoring subsequent args
    --number (-n): int = 0 # Pop a certain amount of envs from the top of the stack, ignoring subsequent args
    ...envnames: string # Which envs to pop
] {
    let currents = get-currents
    if ($currents.envstack | is-empty) {
        print $"(ansi grey)Nothing to pop(ansi reset)"
    } else {
        mut removed = []
        mut new_stack = $currents.envstack
        if ((not $select) and ($all or $number > 0 or ($envnames | is-empty))) {
            let number = if $all {
                $currents.envstack | length
            } else if $number > 0 {
                $number
            } else {
                1
            }
            $removed = $currents.envstack | slice ($number * -1).. | get name
            $new_stack = $currents.envstack | drop $number
        } else {
            let invalid = $envnames | where {not ($in in ($currents.envstack | get name))}
            if (not ($invalid | is-empty)) {
                print $"(ansi red)Env\(s) ($invalid) not in the stack(ansi reset)"
                error make {msg: "Invalid env names"}
            }
            # We don't select envs from the state but from the stack
            let fake_state = { envs: ($currents.envstack | get name | each {{$in: ""}} | into record) }
            $removed = select-envs $envnames false $fake_state --verb "remove" | get name
            $new_stack = $currents.envstack | where {not ($in.name in $removed)}
        }
        do-remove $removed
        set-currents --envstack $new_stack
    }
}

# Activate/deactivate some envs in the stack. Similar to push/pop, but with a quicker workflow
def "main toggle" [
    --unique (-u) # Whether to select just one environment (in which case the env picker will come with a searchbar)
    ...envnames: string # Which envs to toggle
] {
    let currents = get-currents
    let fake_state = { envs: ($currents.envstack | get name | each {{$in: ""}} | into record) }
    let selected = select-envs $envnames $unique $fake_state --verb "toggle" | get name
    let new_stack = $currents.envstack |
        insert selected {$in.name in $selected} |
        update active {|e|
            if ($e.selected) {not $e.active} else {$e.active}
        }
    do-remove ($new_stack | where {$in.selected and not $in.active} | get name)
    do-switch --append ($new_stack | where {$in.selected and $in.active})
    set-currents --envstack ($new_stack | reject selected)
}

# Move an env of the stack to a certain position. Use --bottom to move it to the lowermost position
def "main move" [
    envname: string # Which env to move
    new_position = 0 # Where to put it
    --bottom (-b) # Place it to the bottom instead
] {
    let stack = (get-currents).envstack | reverse
    mut new_position = if $bottom {($stack | length) - 1} else {$new_position}
    let env_ = try {
        $stack | zip (0..) | where {$in.0.name == $envname} | get 0
    } catch {
        error make {msg: $"Env ($envname) not present in the stack"}
    }
    let env_position = $env_.1
    let env_ = $env_.0
    let stack = if $env_position == 0 {
            $stack | slice (1..)
        } else {
            $stack | slice (0..($env_position - 1)) | append ($stack | slice (($env_position + 1)..))
        }
    let stack = $stack | insert $new_position $env_
    set-currents --envstack ($stack | reverse)
}

# Make bulk updates to the stack via a temporary file
def "main stack" [
    --statedir (-d): string = "" # Statedir where to look for newly added envs
] {
    let state = get-state $statedir
    let stack = (get-currents).envstack
    let tmp_dir = mktemp -d
    let script = $tmp_dir | path join "envil-stack.yaml"
    [
        "### Edit the following entries to add, remove or reorder envs from your stack:"
        ""
        ...($stack | reverse | each {
                if $in.source == $state.statedir {
                    reject source
                } else {
                    $in
                } | if $in.active {
                    reject active
                } else {
                    $in
                } | if ($in | columns) == ["name"] {
                    get name
                } else {
                    $in
                }
            } | to yaml | lines)
        ""
        $"### The following envs are available in ($state.statedir):"
        ""
        ...($state.envs | columns | each {$"# - ($in)"})
        ""
    ] | str join "\n" | save $script
    run-external $env.EDITOR $script
    let new_stack = open $script | reverse | each {|entry|
        if ($entry | describe) == "string" {
            {name: $entry, source: $state.statedir, active: true}
        } else {
            $entry | default $state.statedir source | default true active
        }
    }
    rm -rf $tmp_dir
    let join = $new_stack | rename -c {active: in_new} |
        join --outer ($stack | rename -c {active: in_old}) name |
        default false in_new | default false in_old
    let to_rm = $join | where {|e| $e.in_old and not $e.in_new}
    let to_add = $join | where {|e| $e.in_new and not $e.in_old}
    do-remove ($to_rm | get name)
    do-switch --append ($to_add | insert active true)
    set-currents --envstack $new_stack --statedir $state.statedir
}

def grey-out-inactives [] {
    each {|env_|
        let fn = {if $env_.active? == true {$in} else {$"(ansi grey)($in)(ansi reset)"}}
        $env_ | update name $fn | update source $fn | update active $fn
    }
}

def ls-filenames [folder: path] {
    try {
        ls -s $folder | get name
    } catch {
        []
    }
}

# Report if some bins are present several times in your PATH
def "main duplicates" [
    --all (-a) # Check for all bins, not just those in the nix store
] {
    let bins = $env.PATH | each {|p| try {ls $p} catch {[]} | insert source $p} | flatten | rename -c {name: path} |
               insert stem {$in.path | path parse | get stem} | update path {path expand} |
               if $all { $in } else { where path starts-with /nix/store }
    $bins |
        group-by stem --to-table |
        each {|bin|
            let items = $bin.items | uniq-by path | uniq-by source
            if (($items | length) >= 2) {
                {"Duplicated bins": $bin.group, "Sources": $items.source}
            }
        }
}

# Print out the current state of the stack & bins in the PATH, and the same for the current subshell (if any)
def "main show" [] {
    let currents = get-currents
    let bindir = [(nixprof) bin] | path join
    {
        "Current statedir": $currents.statedir?
        "Env stack": (if ($bindir in $env.PATH) {
                $currents.envstack | reverse | grey-out-inactives
            } else {
                "(not in PATH)"
            })
        "Bins in stack": (if ($bindir in $env.PATH) {
                ls-filenames $bindir | sort -i | str join ", "
            } else {
                $"(ansi yellow)`($bindir)' is not present in the PATH(ansi reset)"
            })
        ...(if ($env.SHELL_ENV? != null) {
                {
                    "Envs in subshell": ($env.SHELL_ENV | split row "+")
                    "Bins in subshell": ($env.PATH | where {str ends-with "-envil/bin"} | ansi strip |
                                        each {ls-filenames $in} | flatten | sort -i | str join ", ")
                }
            } else {
                {}
            })
    }
}

# Update selected envs' inputs (package sources) and associated lockfiles
#
# IMPORTANT: This does not touch the stack. If you want to update you current stack, run `envil switch -r' afterwards
def "main update" [
    --unique (-u) # Whether to select just one environment
    --statedir (-d): string = "" # Where to read the envil state from and write the updated flake.lock files. If empty, uses last used statedir
    ...envnames: string # Envs to update (will open a picker if none is given)
] {
    let state = get-state $statedir
    if $state.statedir_is_flake? == true {
        print $"(ansi red)Statedir is a flake. Run `nix flake update --flake ($state.statedir)` directly(ansi reset)"
        error make {msg: "Cannot update statedir"}
    }
    let envnames = select-envs $envnames $unique $state --verb "update" | insert update true
    write-flakes $envnames
    print $"(ansi grey)Updated flake.lock files for env\(s) (ansi green)($envnames | get name)(ansi reset)"
}

# Edit the current statedir config file and refresh the stack
def "main state" [
    --statedir (-d): string = "" # Where to read and write the envil state. If empty, uses last used statedir
    --no-refresh (-R) # Do not refresh the stack after editing
] {
    if ($env.EDITOR? | is-empty) {
        print $"(ansi red)Your EDITOR env var is not set(ansi reset)"
        return
    }
    let statefile = ( with-resolved-statedir $statedir
        --on-flake-url {
            print $"(ansi red)Cannot edit a statedir opened from a flake URL(ansi reset)"
            null
        }
        --on-flake-state {|statedir|
            $statedir | path join "flake.nix"
        }
        --on-yaml-state {|statedir|
            $statedir | path join "envil-state.yaml"
        }
    )
    if ($statefile != null) {
        let orig = open -r $statefile
        run-external $env.EDITOR $statefile
        if (not $no_refresh) {
            if $orig == (open -r $statefile) {
                print "Nothing changed"
            } else {
                main switch -r
            }
        }
    }
}
