#!/usr/bin/env nu

use lib/gen-flake.nu *
use lib/state.nu *

def main [] {
    main show
}

def select-envs [
    preselected: list<string>
    unique: bool
    state: record<envs: any>
    --verb: string = "use"
] {
    if ($preselected | is-empty) {
        let statedir_bit = if $state.statedir? != null {
            $" \(from (ansi yellow)`($state.statedir)'(ansi reset)) "
        } else {
            " "
        }
        let prompt = $"Select the env ($statedir_bit)to ($verb):"
        let prompt_multi = $"Select the envs($statedir_bit)to ($verb) \(Use <spacebar> to \(de)select one, <a> to \(de)select all)"
        
        $state.envs |
            transpose name desc |
            flatten |
            select name description? |
            update description {|e|
                let desc_bit = if $e.description? != null {
                    $" (ansi grey)\(($e.description))(ansi reset)"
                } else {
                    ""
                }
                $"($e.name)($desc_bit)"
            } |
            sort-by -i name |
            if $unique {
                input list -d description -f $prompt | [$in]
            } else {
                input list -d description -m $prompt_multi
            } |
            get name
    } else {
        $preselected
    } | wrap name | insert source $state.statedir?
}

# Print out the flake that will generate an env
def "main flake" [
    envname: string = ""
    --statedir (-d): path = "" # Where to read the envil state from
                               #
                               # If empty, will use the statedir of the current stack
    --systems (-s): list<string> = []
    # Which systems should this flake build for. The flake will use `nixpkgs.lib.systems.flakeExposed' if <systems> is left empty
] {
    let state = get-state $statedir
    let envname = if ($envname == "") {
        select-envs [] true $state --verb "create a flake for" | get 0.name
    } else {
        $envname
    }
    generate-flake $envname $state $systems
}

def do-update [flakepath: path] {
    try {
        ^nix flake update --flake $"path:($flakepath)" --refresh
    } catch {
        # We may be on an older version of nix where the --flake arg does not exist yet
        ^nix flake update $"path:($flakepath)" --refresh
    }
}

def write-flakes [
    environments: table<source: path, name: string>
    tmp_flake_name: string
    refresh_tmp_flake: bool
] {
    let flakes = $environments | each {|env_|
        let flakepath = [$env_.source flakes $env_.name] | path join
        let flake = generate-flake $env_.name (get-state $env_.source)
        mkdir $flakepath
        $flake | save -rf ([$flakepath flake.nix] | path join)
        if (not ([$flakepath flake.lock] | path join | path exists) or $env_.update? == true) {
            do-update $flakepath
        }
        {envname: $env_.name, flakepath: $flakepath}
    }
    if ($flakes | length) == 1 {
        $flakes.0.flakepath
    } else {
        let metaenv_name = $"envil-($tmp_flake_name)"
        # Generate a temporary flake.nix that will create an env that merges those of the stack:
        let m_flakepath = [~ .envil tmp-flakes $tmp_flake_name] | path join | path expand -n
        let m_state = {
            inputs: ($flakes | each {{$in.envname: $"path:($in.flakepath)"}} | into record)
            envs: {
                $metaenv_name: {
                    contents: ($environments | each {{$in.name: [__selected]}} | into record)
                }
            }
        }
        let flake = generate-flake $metaenv_name $m_state
        if $refresh_tmp_flake {
            # We delete the $tmp_flake_name flake including the flake.lock
            rm -rf $m_flakepath
        }
        mkdir $m_flakepath
        $flake | save -rf ([$m_flakepath flake.nix] | path join)
        $m_flakepath
    }
}

# Temporarily activate some envs by starting a subshell
def "main shell" [
    --unique (-u) # Whether to select just one environment (in which case the env picker will come with a searchbar)
    --empty (-e) # Whether to start a shell that contains nothing, to hide the current stack. Implies --isolated
    --statedir (-d): path = "" # Where to read the envil state from. If empty, will use the last used statedir
    --isolated (-i) # Whether to limit the PATH of the shell so it can only see the tools from the selected envs and standard UNIX paths
    --no-refresh (-R) # Do not refresh the flake.lock of the temp flake generated for the whole shell
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    if ($env.SHELL_ENV? != null) {
        error make {msg: "Nested subshells are not supported"}
    }
    let isolated = $isolated or $empty
    let state = get-state $statedir
    let envstack = if $empty {[]} else {select-envs $envnames $unique $state --verb "use in the subshell"}
    let flakepath = write-flakes $envstack "shell" (not $no_refresh)
    let isolated_bit = if $isolated {"an isolated"} else {"a"}
    print $"(ansi grey)Starting ($isolated_bit) subshell with env\(s) (ansi green)($envstack | get name)(ansi grey)...(ansi reset)"
    let merged_name = $envstack | get name | str join "+"
    let new_path = if $isolated {
        [/usr/local/sbin, /usr/local/bin, /usr/sbin, /usr/bin, /sbin, /bin]
    } else {
        $env.PATH
    }
    set-currents --statedir $state.statedir
    try {
        let nix_exe = (which nix).path.0
        PATH=$new_path SHELL_ENV=$merged_name run-external $nix_exe shell $"path:($flakepath)#__selected"
    } catch {
        print $"(ansi grey)Last subshell command exited with (ansi yellow)($env.LAST_EXIT_CODE)(ansi reset)"
    }
}

# Run an executable provided by an env
def "main run" [
    envname: string # Which environment to look in
    bin = "" # Which bin to run. If empty will use `envname' as the bin name
    --statedir (-d): path = "" # Where to read the envil state from. If empty, will use the last used statedir
    ...args: string # The args to give to the command
] {
    let state = get-state $statedir
    let flakepath = write-flakes [{name: $envname, source: $state.statedir}] "run" true
    let output = ^nix build $"path:($flakepath)#__selected" --print-out-paths --no-link
    let bin = if ($bin | is-empty) {
        $envname
    } else {
        $bin
    }
    let bin_path = $output | path join "bin" $bin
    if ($bin_path | path exists) {
        run-external $bin_path ...$args
    } else {
        print $"(ansi red)Could not find bin `($bin)' in env `($envname)'.(ansi reset) Other bins in that env:"
        ls-filenames ($output | path join "bin")
    }
}

def do-switch [
    envstack: table<source: path, name: string>
    statedir: path
    refresh_tmp_flake: bool
] {
    let flakepath = write-flakes $envstack "stack" $refresh_tmp_flake
    ^nix build $"path:($flakepath)#__selected" -o ([~ .envil current] | path join | path expand -n)
    set-currents --envstack $envstack --statedir $statedir
}

# Switch to a new stack, or reload the current one from statedirs
def "main switch" [
    --unique (-u) # Whether to select just one environment (in which case the env picker will come with a searchbar)
    --statedir (-d): path = "" # Where to read the envil state from. If empty, will use the last used statedir
    --reload (-r) # Reload the current stack, ignoring other args
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    let state = get-state $statedir
    let new_stack = if $reload {
        (get-currents).envstack
    } else {
        select-envs $envnames $unique $state --verb "switch to"
    }
    do-switch $new_stack $state.statedir true
    show-stack
}

# Add new envs on top of the stack
def "main push" [
    --unique (-u) # Whether to select just one env (in which case the env picker will come with a searchbar)
    --statedir (-d): path = "" # Where to read the envil state from. If empty, will use the last used statedir
    --no-refresh (-R) # Do not refresh the flake.lock of the temp flake generated for the whole stack
    ...envnames: string # Envs to activate (will open a picker if none is given)
] {
    let state = get-state $statedir
    let stack = (get-currents).envstack
    let new_stack = select-envs $envnames $unique ($state | update envs {reject -i ...($stack | get name)}) --verb "add to the stack"
    do-switch ($stack ++ $new_stack) $state.statedir (not $no_refresh)
    show-stack
}

# Remove the top env(s) from the stack
#
# If no args are given, pops the first env on top of the stack
def "main pop" [
    --select (-s) # Open a selector menu, ignoring subsequent args
    --all (-a) # Pop the entire stack, ignoring subsequent args
    --number (-n): int = 0 # Pop a certain amount of envs from the top of the stack, ignoring subsequent args
    ...envnames: string # Which envs to pop
] {
    let currents = get-currents
    if ($currents.envstack | is-empty) {
        print $"(ansi grey)Nothing to pop(ansi reset)"
    } else {
        let new_stack = if ((not $select) and ($all or $number > 0 or ($envnames | is-empty))) {
            let number = if $all {
                $currents.envstack | length
            } else if $number > 0 {
                $number
            } else {
                1
            }
            $currents.envstack | drop $number
        } else {
            let invalid = $envnames | where {not ($in in ($currents.envstack | get name))}
            if (not ($invalid | is-empty)) {
                print $"(ansi red)Env\(s) ($invalid) not in the stack(ansi reset)"
                error make {msg: "Invalid env names"}
            }
            # We don't select envs from the state but from the stack
            let fake_state = { envs: ($currents.envstack | get name | each {{$in: ""}} | into record) }
            let removed = select-envs $envnames false $fake_state --verb "remove" | get name
            $currents.envstack | where {not ($in.name in $removed)}
        }
        do-switch $new_stack $currents.statedir false
        show-stack
    }
}

# Move an env of the stack to a certain position. Use --bottom to move it to the lowermost position
def "main move" [
    envname: string # Which env to move
    new_position = 0 # Where to put it
    --bottom (-b) # Place it to the bottom instead
] {
    let stack = (get-currents).envstack | reverse
    mut new_position = if $bottom {($stack | length) - 1} else {$new_position}
    let env_ = try {
        $stack | zip (0..) | where {$in.0.name == $envname} | get 0
    } catch {
        error make {msg: $"Env ($envname) not present in the stack"}
    }
    let env_position = $env_.1
    let env_ = $env_.0
    let stack = if $env_position == 0 {
            $stack | range (1..)
        } else {
            $stack | range (0..($env_position - 1)) | append ($stack | range (($env_position + 1)..))
        }
    let stack = $stack | insert $new_position $env_
    set-currents --envstack ($stack | reverse)
    show-stack
}

def show-stack [] {
    print $"(ansi grey)Env stack is now:(ansi reset)"
    (get-currents).envstack | reverse
}

def ls-filenames [folder: path] {
    try {
        ls -s $folder | get name
    } catch {
        []
    }
}

# Report if some bins are present several times in your PATH
def "main duplicates" [
    --all (-a) # Check for all bins, not just those in the nix store
] {
    let bins = $env.PATH | each {|p| try {ls $p} catch {[]} | insert source $p} | flatten | rename -c {name: path} |
               insert stem {$in.path | path parse | get stem} | update path {path expand} |
               if $all { $in } else { where path starts-with /nix/store }
    $bins |
        group-by stem --to-table |
        each {|bin|
            let items = $bin.items | uniq-by path | uniq-by source
            if (($items | length) >= 2) {
                {"Duplicated bins": $bin.group, "Sources": $items.source}
            }
        }
}

# Print out the current state of the stack & bins in the PATH, and the same for the current subshell (if any)
def "main show" [] {
    let currents = get-currents
    let bindir = [~ .envil current bin] | path join | path expand -n
    {
        "Current statedir": $currents.statedir?
        "Env stack": (if ($bindir in $env.PATH) {
                $currents.envstack | reverse
            } else {
                "(not in PATH)"
            })
        "Bins in stack": (if ($bindir in $env.PATH) {
                ls-filenames $bindir | sort -i | str join ", "
            } else {
                $"(ansi yellow)`($bindir)' is not present in the PATH(ansi reset)"
            })
        ...(if ($env.SHELL_ENV? != null) {
                {
                    "Envs in subshell": ($env.SHELL_ENV | split row "+")
                    "Bins in subshell": ($env.PATH | where {str ends-with "-envil/bin"} | ansi strip |
                                        each {ls-filenames $in} | flatten | sort -i | str join ", ")
                }
            } else {
                {}
            })
    }
}

# Update selected envs' inputs (package sources) and associated lockfiles
#
# IMPORTANT: This does not touch the stack. If you want to update you current stack, run `envil switch -r' afterwards
def "main update" [
    --unique (-u) # Whether to select just one environment
    --statedir (-d): path = "" # Where to read the envil state from and write the updated flake.lock files. If empty, uses last used statedir
    ...envnames: string # Envs to update (will open a picker if none is given)
] {
    let state = get-state $statedir
    let envnames = select-envs $envnames $unique $state --verb "update" | insert update true
    let flakepath = write-flakes $envnames "stack" true
    print $"(ansi grey)Updated flake.lock files for env\(s) (ansi green)($envnames | get name)(ansi reset)"
}
